:Microservices
    :An application is divided into a set of loosely coupled, collaborating services.
    :Each service would include
        :Highly maintainable and testable
        :Loosely coupled with other services
        :Independently deployable
        :Capable of being developed by a small team
    :Communication between these services using either synchronous protocols such as HTTP/REST or asynchronous protocols
        such as AMQP
    :These services would have independent Databases[1]
    :Data consistency between services is maintaned using saga pattern[2]
    :Services must be loosely coupled so that they can be developed, deployed and scaled Independently


:Extensions
[1]Database as a service
    :Services need to persist data in some kind of database.
    :Each service can use the type of database that is best suited to its needs.
        :In terms of relational database
            :Private-tables-per-service - each service owns set of tables that must only be accessed by that service
            :Schema-per-service - each service has a database schema that's private to that service
            :Database-server-per-service - each service has it's own database server.
    :Drawbacks
        :Complexity of managing multiple SQL and NoSQL Databases
        :Implementing queries that join data that is now in multiple databses is challenging
        :Implementing business transactions that span multiple services is not straightforward. Distributed transactions
         are best avoided because of CAP theorem
[2]Saga pattern